{
  "$schema": "./node_modules/angular-module-builder-cli/config/schema.json",
  "root": "src/lib",
  "version": "1.6.0-beta.4",
  "outDir": "dist-amb",
  "libs": [
    {
      "name": "alyle-ui/core",
      "dir": "core"
    },
    {
      "name": "alyle-ui",
      "dir": "/"
    },
    {
      "name": "alyle-ui/ls",
      "dir": "ls"
    },
    {
      "name": "alyle-ui/responsive",
      "dir": "responsive"
    },
    {
      "name": "alyle-ui/ripple-minimal",
      "dir": "ripple-minimal"
    },
    {
      "name": "alyle-ui/radio",
      "dir": "radio"
    },
    {
      "name": "alyle-ui/shadow",
      "dir": "shadow"
    },
    {
      "name": "alyle-ui/icon-button",
      "dir": "icon-button"
    },
    {
      "name": "alyle-ui/button",
      "dir": "button"
    },
    {
      "name": "alyle-ui/input",
      "dir": "input"
    },
    {
      "name": "alyle-ui/resizing-cropping-images",
      "dir": "resizing-cropping-images"
    },
    {
      "name": "alyle-ui/carousel",
      "dir": "carousel"
    },
    {
      "name": "alyle-ui/menu",
      "dir": "menu"
    },
    {
      "name": "alyle-ui/checkbox",
      "dir": "checkbox"
    },
    {
      "name": "alyle-ui/header-pagination",
      "dir": "header-pagination"
    },
    {
      "name": "alyle-ui/svg",
      "dir": "svg"
    },
    {
      "name": "alyle-ui/tabs",
      "dir": "tabs"
    },
    {
      "name": "alyle-ui/toolbar",
      "dir": "toolbar"
    },
    {
      "name": "alyle-ui/drawer",
      "dir": "drawer"
    }
  ],
  "globals": {
    "@angular/core": "ng.core",
    "@angular/platform-browser": "ng.platformBrowser",
    "@angular/common": "ng.common",
    "@angular/common/http": "ng.common.http",
    "@angular/forms": "ng.forms",
    "@angular/http": "ng.http",
    "@angular/animations": "ng.animations",
    "alyle-ui": "ly",
    "alyle-ui/button": "ly.button",
    "alyle-ui/carousel": "ly.carousel",
    "alyle-ui/core": "ly.core",
    "alyle-ui/header-pagination": "ly.headerPagination",
    "alyle-ui/icon-button": "ly.iconButton",
    "alyle-ui/ls": "ly.ls",
    "alyle-ui/menu": "ly.menu",
    "alyle-ui/responsive": "ly.responsive",
    "alyle-ui/ripple": "ly.ripple",
    "alyle-ui/ripple-minimal": "ly.rippleMinimal",
    "alyle-ui/shadow": "ly.shadow",
    "rxjs": "Rx",
    "rxjs/Observable": "Rx",
    "rxjs/Subject": "Rx",
    "rxjs/Observer": "Rx",
    "rxjs/Subscription": "Rx",
    "rxjs/BehaviorSubject": "Rx",
    "rxjs/observable/merge": "Rx.Observable",
    "rxjs/operator/share": "Rx.Observable.prototype",
    "rxjs/operator/observeOn": "Rx.Observable.prototype",
    "rxjs/observable/of": "Rx.Observable.prototype",
    "rxjs/operator/combineLatest": "Rx.Observable.prototype",
    "rxjs/operator/merge": "Rx.Observable.prototype",
    "rxjs/operator/map": "Rx.Observable.prototype",
    "rxjs/operator/auditTime": "Rx.Observable.prototype",
    "rxjs/operator/switchMap": "Rx.Observable.prototype",
    "rxjs/operator/do": "Rx.Observable.prototype",
    "rxjs/operator/skip": "Rx.Observable.prototype",
    "rxjs/operator/take": "Rx.Observable.prototype",
    "rxjs/operator/toArray": "Rx.Observable.prototype",
    "rxjs/operator/toPromise": "Rx.Observable.prototype",
    "rxjs/add/operator/map": "Rx.Observable.prototype",
    "rxjs/add/operator/scan": "Rx.Observable.prototype",
    "rxjs/add/operator/skip": "Rx.Observable.prototype",
    "rxjs/add/operator/do": "Rx.Observable.prototype",
    "rxjs/add/operator/distinctUntilChanged": "Rx.Observable.prototype",
    "rxjs/add/operator/filter": "Rx.Observable.prototype",
    "rxjs/add/operator/skipUntil": "Rx.Observable.prototype",
    "rxjs/add/operator/skipWhile": "Rx.Observable.prototype",
    "rxjs/add/operator/withLatestFrom": "Rx.Observable.prototype",
    "rxjs/add/operator/switchMap": "Rx.Observable.prototype",
    "rxjs/add/observable/merge": "Rx.Observable",
    "rxjs/add/observable/of": "Rx.Observable.prototype",
    "rxjs/add/observable/fromPromise": "Rx.Observable.prototype",
    "rxjs/add/operator/delay": "Rx.Observable",
    "rxjs/add/operator/debounce": "Rx.Observable",
    "rxjs/add/operator/debounceTime": "Rx.Observable.prototype",
    "rxjs/add/operator/share": "Rx.Observable",
    "rxjs/observable/fromEvent": "Rx.Observable",
    "rxjs/observable/from": "Rx.Observable",
    "rxjs/operator": "Rx.Observable.prototype",
    "rxjs/scheduler/queue": "Rx.Scheduler",
    "chroma-js": "chroma"
  }
}
